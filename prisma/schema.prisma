generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

model User {
  id               String            @id @default(uuid())
  name             String
  username         String?           @unique
  email            String            @unique
  password         String
  phone            String            @unique
  isAdmin          Boolean           @default(false) @map("is_admin")
  token            String?
  categories       Category[]
  checkingAccounts CheckingAccount[]
  creditCards      CreditCard[]

  @@map("users")
}

model CreditCard {
  id           String        @id @default(uuid())
  name         String
  lastDigits   Decimal       @map("last_digits")
  limit        Float
  closingDate  DateTime      @map("closing_date")
  invoice      Float
  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("credit_cards")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  userId       String        @map("user_id")
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("categories")
}

enum TransactionType {
  INCOME
  OUTCOME
  INVOICE_PAYMENT

  @@map("transaction_type")
}

model Transaction {
  id                String           @id @default(uuid())
  name              String
  date              DateTime         @default(now())
  value             Float
  creditCardId      String?          @map("credit_card_id")
  categoryId        String?          @map("category_id")
  checkingAccountId String?          @map("checking_account_id")
  balanceAdjustment Boolean          @default(false) @map("balance_adjustment")
  type              TransactionType
  checkingAccounts  CheckingAccount? @relation(fields: [checkingAccountId], references: [id], onDelete: Cascade)
  categories        Category?        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  creditCards       CreditCard?      @relation(fields: [creditCardId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model CheckingAccount {
  id             String        @id @default(uuid())
  userId         String        @map("user_id")
  name           String
  account        String
  agency         String
  bank           String
  balance        Float
  maintenanceFee Float         @map("maintenance_fee")
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction    Transaction[]

  @@map("checking_accounts")
}
